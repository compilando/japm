// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

//ช่วย AI Prompt Management (JAPM)
// version: 0.2.0
// description: Data model for managing AI prompts, versions, assets, localization, and execution logs.

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["views", "extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

// ENUMS & CUSTOM TYPES (alphabetical order)
enum PromptVersionStatus {
  draft
  active
  archived
}

enum MarketplacePublishStatus {
  NOT_PUBLISHED
  PENDING_APPROVAL
  PUBLISHED
  REJECTED
}

enum Role {
  user
  admin
  tenant_admin
  prompt_consumer
}

enum PromptType {
  SYSTEM      // Base model instructions
  USER        // User input
  ASSISTANT   // Assistant's response
  GUARD       // Security and validation rules
  COMPOSITE   // Prompt composed of other prompts
  CONTEXT     // Contextual information
  FUNCTION    // Function/capability definition
  EXAMPLE     // Usage examples
  TEMPLATE    // Reusable templates
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  PUBLISH
  UNPUBLISH
  APPROVE
  REJECT
}

enum ActivityEntityType {
  PROMPT
  PROMPT_VERSION
  PROMPT_TRANSLATION
  PROMPT_ASSET
  PROMPT_ASSET_VERSION
  ASSET_TRANSLATION
  PROJECT
  ENVIRONMENT
  AI_MODEL
  TAG
  REGION
  CULTURAL_DATA
  RAG_DOCUMENT
}

// MODELS (alphabetical order)
model User {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role     Role @default(user) // Puede ser 'admin', 'user', etc.

  projects            Project[]            @relation("OwnedProjects")
  promptExecutionLogs PromptExecutionLog[] // Relación inversa añadida
  activityLogs        ActivityLog[]        // Nueva relación
  ownedPrompts        Prompt[]            @relation("OwnedPrompts")

  // Marketplace relations
  authoredMarketplacePromptRequests PromptVersion[] @relation("AuthoredMarketplacePromptRequests")
  approvedMarketplacePromptRequests PromptVersion[] @relation("ApprovedMarketplacePromptRequests")

  authoredMarketplaceAssetRequests PromptAssetVersion[] @relation("AuthoredMarketplaceAssetRequests")
  approvedMarketplaceAssetRequests PromptAssetVersion[] @relation("ApprovedMarketplaceAssetRequests")

  @@index([tenantId])
}

model Region {
  id                       String                @id @default(cuid())
  languageCode             String
  name                     String                @default("")
  parentRegion             Region?               @relation("Region_parentRegion", fields: [parentRegionId], references: [id])
  parentRegionId           String?               @map("parentRegion") // Este será el CUID del padre
  timeZone                 String                @default("")
  notes                    String                @default("")
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  culturalData             CulturalData[]        @relation("CulturalData_region")
  from_Region_parentRegion Region[]              @relation("Region_parentRegion")
  from_RagDocumentMetadata RagDocumentMetadata[] @relation("RagDocumentMetadata_region")

  project   Project @relation("ProjectRegions", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@unique([projectId, languageCode])
  @@index([parentRegionId])
  @@index([projectId])
  @@index([languageCode])
}

model CulturalData {
  id             String   @id @default(cuid())
  key            String // ANTERIORMENTE 'id', ahora parte de la clave única compuesta
  regionId       String
  region         Region   @relation("CulturalData_region", fields: [regionId], references: [id])
  style          String   @default("")
  notes          String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project   Project @relation("ProjectCulturalData", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@unique([projectId, key]) // NUEVO: la 'key' (anterior id) es única por proyecto
  @@index([regionId])
  @@index([projectId])
  @@index([key]) // Indexar la nueva key
}

model Prompt {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        PromptType @default(USER)
  projectId   String
  project     Project  @relation("ProjectPrompts", fields: [projectId], references: [id])
  tenantId    String
  tenant      Tenant   @relation("TenantPrompts", fields: [tenantId], references: [id])
  ownerUserId String
  owner       User     @relation("OwnedPrompts", fields: [ownerUserId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions    PromptVersion[] @relation("PromptVersion_prompt")
  tags        Tag[]           @relation("PromptTags")
  assets      PromptAsset[]   @relation("PromptOwnedAssets")

  @@unique([id, projectId], name: "prompt_id_project_unique")
  @@index([ownerUserId])
  @@map("prompts")
}

model PromptVersion {
  id                   String               @id @default(cuid())
  prompt               Prompt               @relation("PromptVersion_prompt", fields: [promptId], references: [id], onDelete: Cascade)
  promptId             String               @map("prompt")
  promptText           String               @default("") @db.Text
  languageCode         String               @default("en-US")
  versionTag           String               @default("1.0.0")
  changeMessage        String?
  status               String               @default("draft")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  translations         PromptTranslation[]  @relation("PromptTranslation_version")
  activeInEnvironments Environment[]        @relation("ActivePromptsInEnvironment")
  executionLogs        PromptExecutionLog[]
  aiModel              AIModel?             @relation(fields: [aiModelId], references: [id])
  aiModelId            String?

  // Marketplace Fields
  marketplaceStatus          MarketplacePublishStatus @default(NOT_PUBLISHED)
  marketplacePublishedAt     DateTime?
  marketplaceRequestedAt     DateTime?
  marketplaceApprovedAt      DateTime?
  marketplaceRejectionReason String?

  marketplaceRequesterId String?
  marketplaceRequester   User?   @relation("AuthoredMarketplacePromptRequests", fields: [marketplaceRequesterId], references: [id], onDelete: SetNull)

  marketplaceApproverId String?
  marketplaceApprover   User?   @relation("ApprovedMarketplacePromptRequests", fields: [marketplaceApproverId], references: [id], onDelete: SetNull)

  @@unique([promptId, versionTag])
  @@index([promptId])
  @@index([aiModelId])
  @@index([marketplaceRequesterId])
  @@index([marketplaceApproverId])
}

model PromptTranslation {
  id           String        @id @default(cuid())
  version      PromptVersion @relation("PromptTranslation_version", fields: [versionId], references: [id], onDelete: Cascade)
  versionId    String        @map("version")
  languageCode String
  promptText   String        @default("") @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([versionId, languageCode])
  @@index([versionId])
  @@index([languageCode])
}

model PromptAsset {
  id        String   @id @default(cuid())

  promptId  String
  projectId String
  prompt    Prompt  @relation("PromptOwnedAssets", fields: [promptId, projectId], references: [id, projectId], onDelete: Cascade)

  key       String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  versions PromptAssetVersion[] @relation("AssetVersions")

  @@unique([promptId, projectId, key], name: "prompt_asset_key_unique")
  @@index([promptId, projectId])
}

model PromptAssetVersion {
  id                   String             @id @default(cuid())
  asset                PromptAsset        @relation("AssetVersions", fields: [assetId], references: [id], onDelete: Cascade)
  assetId              String             @map("asset")
  value                String             @default("") @db.Text
  versionTag           String             @default("1.0.0")
  changeMessage        String?
  status               String             @default("draft")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  languageCode         String             @default("en-US")
  translations         AssetTranslation[] @relation("AssetTranslation_version")
  activeInEnvironments Environment[]      @relation("ActiveAssetsInEnvironment")

  // Marketplace Fields
  marketplaceStatus          MarketplacePublishStatus @default(NOT_PUBLISHED)
  marketplacePublishedAt     DateTime?
  marketplaceRequestedAt     DateTime?
  marketplaceApprovedAt      DateTime?
  marketplaceRejectionReason String?

  marketplaceRequesterId String?
  marketplaceRequester   User?   @relation("AuthoredMarketplaceAssetRequests", fields: [marketplaceRequesterId], references: [id], onDelete: SetNull)

  marketplaceApproverId String?
  marketplaceApprover   User?   @relation("ApprovedMarketplaceAssetRequests", fields: [marketplaceApproverId], references: [id], onDelete: SetNull)

  @@unique([assetId, versionTag])
  @@index([assetId])
  @@index([marketplaceRequesterId])
  @@index([marketplaceApproverId])
}

model AssetTranslation {
  id           String             @id @default(cuid())
  version      PromptAssetVersion @relation("AssetTranslation_version", fields: [versionId], references: [id], onDelete: Cascade)
  versionId    String             @map("version")
  languageCode String
  value        String             @default("") @db.Text
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([versionId, languageCode])
  @@index([versionId])
  @@index([languageCode])
}

model RagDocumentMetadata {
  id                 String   @id @default(cuid())
  documentName       String
  category           String?  @default("")
  complianceReviewed Boolean? @default(false)
  piiRiskLevel       String?  @default("")
  lastReviewedBy     String?  @default("")
  regionId           String? // CUID de Region
  region             Region?  @relation("RagDocumentMetadata_region", fields: [regionId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  project   Project @relation("ProjectRagDocs", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@unique([projectId, documentName]) // NUEVO: documentName es único por proyecto
  @@index([projectId])
  @@index([regionId])
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prompts     Prompt[] @relation("PromptTags")

  project   Project @relation("ProjectTags", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@unique([projectId, name])
  @@index([projectId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  ownerUserId String
  owner       User   @relation("OwnedProjects", fields: [ownerUserId], references: [id], onDelete: Restrict)

  prompts             Prompt[]              @relation("ProjectPrompts")
  environments        Environment[]         @relation("ProjectEnvironments")
  aiModels            AIModel[]             @relation("ProjectModels")
  regions             Region[]              @relation("ProjectRegions")
  culturalDataEntries CulturalData[]        @relation("ProjectCulturalData")
  ragDocs             RagDocumentMetadata[] @relation("ProjectRagDocs")
  tags                Tag[]                 @relation("ProjectTags")
  promptExecutionLogs PromptExecutionLog[]  @relation("ProjectLogs")
  activityLogs        ActivityLog[]         // Nueva relación

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([ownerUserId])
}

model AIModel {
  id            String   @id @default(cuid())
  name          String // Removed global @unique
  provider      String? // Ej: OpenAI, Anthropic, Google
  description   String?
  apiIdentifier String? // Identificador para llamadas API (e.g., "gpt-4o-2024-05-13")
  apiKeyEnvVar  String? // Nombre de la variable de entorno para la API Key (e.g., "OPENAI_API_KEY") - Made optional
  temperature   Float? // Added temperature field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  maxTokens     Int?
  supportsJson  Boolean  @default(false)
  contextWindow Int? // Tamaño máximo de contexto

  project   Project @relation("ProjectModels", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  promptVersions PromptVersion[]

  @@unique([projectId, name])
  @@index([projectId])
}

model Environment {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  activePromptVersions PromptVersion[]      @relation("ActivePromptsInEnvironment")
  activeAssetVersions  PromptAssetVersion[] @relation("ActiveAssetsInEnvironment")
  promptExecutionLogs  PromptExecutionLog[]

  project   Project @relation("ProjectEnvironments", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@unique([projectId, name])
  @@index([projectId])
}

// --- LOGGING --- //

model PromptExecutionLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  promptVersion   PromptVersion @relation(fields: [promptVersionId], references: [id])
  promptVersionId String

  environment   Environment? @relation(fields: [environmentId], references: [id])
  environmentId String?
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?

  input  String
  output String

  success      Boolean
  durationMs   Int?
  errorMessage String?

  project   Project @relation("ProjectLogs", fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project")

  @@index([promptVersionId])
  @@index([environmentId])
  @@index([userId])
  @@index([timestamp])
}

// --- Add New Model Below ---

model SystemPrompt {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  promptText  String
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  projects  Project[]
  prompts   Prompt[] @relation("TenantPrompts")
  assets    Asset[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marketplaceRequiresApproval Boolean @default(true)

  @@map("tenants")
}

model Asset {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  url         String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assets")
}

model ActivityLog {
  id          String           @id @default(cuid())
  timestamp   DateTime         @default(now())
  action      ActivityAction
  entityType  ActivityEntityType
  entityId    String
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  details     String?          @db.Text
  changes     String?          @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([timestamp])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([projectId])
}
